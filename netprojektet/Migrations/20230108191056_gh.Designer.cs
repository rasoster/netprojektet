// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace netprojektet.Migrations
{
    [DbContext(typeof(LinkedoutDbContext))]
    [Migration("20230108191056_gh")]
    partial class gh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Anvandare", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Models.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__competen__3214EC27203929FD");

                    b.ToTable("competence", (string)null);
                });

            modelBuilder.Entity("Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__educatio__3214EC2721B925D8");

                    b.ToTable("education", (string)null);
                });

            modelBuilder.Entity("Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__experien__3214EC27D02F9207");

                    b.ToTable("experience", (string)null);
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("content");

                    b.Property<int?>("Reciever")
                        .HasColumnType("int")
                        .HasColumnName("reciever");

                    b.Property<bool?>("Seen")
                        .HasColumnType("bit")
                        .HasColumnName("seen");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Times")
                        .HasColumnType("datetime")
                        .HasColumnName("times");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK__message__3214EC2753A3CFF9");

                    b.HasIndex("Reciever");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GitHubUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PicUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Visitors")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Profile__3214EC27AD0E7C31");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("Models.ProfileHasCompetence", b =>
                {
                    b.Property<int>("Profileid")
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    b.Property<int>("Competenceid")
                        .HasColumnType("int")
                        .HasColumnName("competenceid");

                    b.HasKey("Profileid", "Competenceid")
                        .HasName("PK__profile___809453B2A4295BDF");

                    b.HasIndex("Competenceid");

                    b.ToTable("profile_has_competence", (string)null);
                });

            modelBuilder.Entity("Models.ProfileHasEducation", b =>
                {
                    b.Property<int>("Profileid")
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    b.Property<int>("Educationid")
                        .HasColumnType("int")
                        .HasColumnName("educationid");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.HasKey("Profileid", "Educationid")
                        .HasName("PK__profile___60E42F3DC720B0F8");

                    b.HasIndex("Educationid");

                    b.ToTable("profile_has_education", (string)null);
                });

            modelBuilder.Entity("Models.ProfileHasExperience", b =>
                {
                    b.Property<int>("Profileid")
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    b.Property<int>("Experienceid")
                        .HasColumnType("int")
                        .HasColumnName("experienceid");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.HasKey("Profileid", "Experienceid")
                        .HasName("PK__profile___09F2273E03F81676");

                    b.HasIndex("Experienceid");

                    b.ToTable("profile_has_experience", (string)null);
                });

            modelBuilder.Entity("Models.ProfileinProject", b =>
                {
                    b.Property<int>("Profileid")
                        .HasColumnType("int")
                        .HasColumnName("profileid");

                    b.Property<int>("Projectid")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("Profileid", "Projectid")
                        .HasName("PK__profile_ProjectID");

                    b.HasIndex("Projectid");

                    b.ToTable("profile_in_Project", (string)null);
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__project__3214EC2729578260");

                    b.HasIndex("CreatorId");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profileID");

                    b.Property<string>("ProfileUserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__users__3214EC2775F0E23F");

                    b.HasIndex("ProfileUserName")
                        .IsUnique()
                        .HasFilter("[ProfileUserName] IS NOT NULL");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ProfileInProject", b =>
                {
                    b.Property<int>("Projectid")
                        .HasColumnType("int");

                    b.Property<int>("Profileid")
                        .HasColumnType("int");

                    b.HasKey("Projectid", "Profileid")
                        .HasName("PK__profile___16385FD84E45517A");

                    b.HasIndex("Profileid");

                    b.ToTable("profile_in_project", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Anvandare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Anvandare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Anvandare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Anvandare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.Profile", "RecieverNavigation")
                        .WithMany("Messages")
                        .HasForeignKey("Reciever")
                        .HasConstraintName("fk_message_reciever");

                    b.Navigation("RecieverNavigation");
                });

            modelBuilder.Entity("Models.ProfileHasCompetence", b =>
                {
                    b.HasOne("Models.Competence", "Competence")
                        .WithMany("ProfileHasCompetences")
                        .HasForeignKey("Competenceid")
                        .IsRequired()
                        .HasConstraintName("fk_competence_id");

                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("ProfileHasCompetences")
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("fk_profilescompetence_id");

                    b.Navigation("Competence");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Models.ProfileHasEducation", b =>
                {
                    b.HasOne("Models.Education", "Education")
                        .WithMany("ProfileHasEducations")
                        .HasForeignKey("Educationid")
                        .IsRequired()
                        .HasConstraintName("fk_education_id");

                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("ProfileHasEducations")
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("fk_profilessss_id");

                    b.Navigation("Education");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Models.ProfileHasExperience", b =>
                {
                    b.HasOne("Models.Experience", "Experience")
                        .WithMany("ProfileHasExperiences")
                        .HasForeignKey("Experienceid")
                        .IsRequired()
                        .HasConstraintName("fk_experience_id");

                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("ProfileHasExperiences")
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("fk_profiless_id");

                    b.Navigation("Experience");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Models.ProfileinProject", b =>
                {
                    b.HasOne("Models.Profile", "Profile")
                        .WithMany("ProfileinProjects")
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("fk_profilessss_id");

                    b.HasOne("Models.Project", "Project")
                        .WithMany("ProfileinProjects")
                        .HasForeignKey("Projectid")
                        .IsRequired()
                        .HasConstraintName("fk_project_id");

                    b.Navigation("Profile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.HasOne("Models.Profile", "Creator")
                        .WithMany("ProjectsNavigation")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("fk_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Profile", "Profile")
                        .WithOne("user")
                        .HasForeignKey("Models.User", "ProfileUserName")
                        .HasPrincipalKey("Models.Profile", "UserName");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ProfileInProject", b =>
                {
                    b.HasOne("Models.Profile", null)
                        .WithMany()
                        .HasForeignKey("Profileid")
                        .IsRequired()
                        .HasConstraintName("fk_profiles_id");

                    b.HasOne("Models.Project", null)
                        .WithMany()
                        .HasForeignKey("Projectid")
                        .IsRequired()
                        .HasConstraintName("fk_project_id");
                });

            modelBuilder.Entity("Models.Competence", b =>
                {
                    b.Navigation("ProfileHasCompetences");
                });

            modelBuilder.Entity("Models.Education", b =>
                {
                    b.Navigation("ProfileHasEducations");
                });

            modelBuilder.Entity("Models.Experience", b =>
                {
                    b.Navigation("ProfileHasExperiences");
                });

            modelBuilder.Entity("Models.Profile", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ProfileHasCompetences");

                    b.Navigation("ProfileHasEducations");

                    b.Navigation("ProfileHasExperiences");

                    b.Navigation("ProfileinProjects");

                    b.Navigation("ProjectsNavigation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Navigation("ProfileinProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
